// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Models;

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("api.Models.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentNumber");

                    b.Property<int>("BuildingId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("DateOfEntrance");

                    b.Property<Guid?>("UserId");

                    b.HasKey("ApartmentId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("UserId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("api.Models.ApartmentDoc", b =>
                {
                    b.Property<int>("ApartmentDocId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId");

                    b.Property<DateTime>("DateUploaded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DocDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ApartmentDocId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentDocs");
                });

            modelBuilder.Entity("api.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BuildingId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Api.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new { RoleId = 1, RoleName = "Administrator" },
                        new { RoleId = 2, RoleName = "Handyman" },
                        new { RoleId = 3, RoleName = "Resident" }
                    );
                });

            modelBuilder.Entity("api.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("ServiceName")
                        .IsRequired();

                    b.Property<int>("WarrantyPeriodInMonths");

                    b.HasKey("ServiceId");

                    b.ToTable("Service");

                    b.HasData(
                        new { ServiceId = 1, IsEnable = true, ServiceName = "אינסטלציה", WarrantyPeriodInMonths = 60 }
                    );
                });

            modelBuilder.Entity("api.Models.ServiceInHandyman", b =>
                {
                    b.Property<int>("ServiceId");

                    b.Property<Guid>("UserId");

                    b.HasKey("ServiceId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceInUser");
                });

            modelBuilder.Entity("api.Models.ServiceInHandymanInBuilding", b =>
                {
                    b.Property<int>("BuildingId");

                    b.Property<Guid>("UserId");

                    b.Property<int>("ServiceId");

                    b.HasKey("BuildingId", "UserId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceInHandymanInBuilding");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<string>("Company")
                        .HasMaxLength(300);

                    b.Property<DateTime>("DateRegistered")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IdentityCardId");

                    b.Property<bool>("IsAcceptEmails");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("char(64)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone2")
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new { UserId = new Guid("c73633bc-f8df-4660-b3ed-51e9479df820"), DateRegistered = new DateTime(2019, 8, 11, 20, 3, 54, 83, DateTimeKind.Local), Email = "eyal.ank@gmail.com", FirstName = "Eyal", IdentityCardId = 33913450, IsAcceptEmails = false, IsDeleted = false, LastName = "Ankri", Password = "744fd6f1e1f3bc2d2a023c27f4bcc1a12523767d55de7508c0b21a160ab1fdbf", Phone1 = "054-6680240" },
                        new { UserId = new Guid("c2fef337-4858-4c8b-899e-e6aacb2da339"), DateRegistered = new DateTime(2019, 8, 11, 20, 3, 54, 85, DateTimeKind.Local), Email = "carmelm@maozdaniel.co.il", FirstName = "Carmel", IdentityCardId = 0, IsAcceptEmails = false, IsDeleted = false, LastName = "Malca", Password = "d37d6f4d78542a3131bf5977d2ebb36346ff20bf0fc9365b0b7e28b1fbcdb89b", Phone1 = "054-2446997" }
                    );
                });

            modelBuilder.Entity("api.Models.UserInRole", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInRoles");

                    b.HasData(
                        new { RoleId = 1, UserId = new Guid("c73633bc-f8df-4660-b3ed-51e9479df820") },
                        new { RoleId = 1, UserId = new Guid("c2fef337-4858-4c8b-899e-e6aacb2da339") }
                    );
                });

            modelBuilder.Entity("api.Models.Apartment", b =>
                {
                    b.HasOne("api.Models.Building")
                        .WithMany("Apartments")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api.Models.ApartmentDoc", b =>
                {
                    b.HasOne("api.Models.Apartment")
                        .WithMany("ApartmentDocs")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("api.Models.ServiceInHandyman", b =>
                {
                    b.HasOne("api.Models.Service")
                        .WithMany("ServiceInUser")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Models.User")
                        .WithMany("ServiceInUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("api.Models.ServiceInHandymanInBuilding", b =>
                {
                    b.HasOne("api.Models.Building")
                        .WithMany("ServiceInHandymanInBuilding")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Models.Service")
                        .WithMany("ServiceInHandymanInBuilding")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Models.User")
                        .WithMany("ServiceInHandymanInBuilding")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("api.Models.UserInRole", b =>
                {
                    b.HasOne("Api.Models.Role")
                        .WithMany("UserInRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Models.User")
                        .WithMany("UserInRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
